	PP -> {TS := CreaTabla(); despl := 0}:100
	      P {LiberaTabla(TS), Pop(1)}:101   						//// 1
	P -> B P {}														//// 2
	P -> F P {}														//// 3
	P -> lambda 													//// 4
	B -> if ( E ) {S.pos := B.pos}:102 S {B.tipo := if E.tipo = logico
			 then S.tipo else tipo_error; Pop(5)}:103				//// 5
	B -> let {zona_decl := true}:104 id {zona_decl := false}:105
	     T ; {B.tipo := if
		  AnadirTipo(id.pos, T.tipo) then tipo_ok
		  else tipo_error; Pop(4)}:106								//// 6
	B -> for ( M1 ; E ; M2 ) { {C.tipo := vacio}:107
		  C } {B.tipo := if
		  E.tipo = logico && M1.tipo = tipo_ok && M2.tipo = tipo_ok
		  then tipo_ok
          else tipo_error, Pop(11)}:108							//// 7
	B -> {S.tipo := B.tipo; S.pos := B.pos}:109 S {B.tipo := S.tipo; Pop(1)}:110	//// 8
	M -> id N E {M.tipo = if
		  BuscaTipo(id.pos) = E.tipo = N.tipo = entero
		  then tipo_ok
		  else tipo_error; Pop(3)}:111								//// 9
	M -> lambda {M.tipo := tipo_ok}:112 							//// 10
	N -> %= {N.tipo := entero; Pop(1)}:113							//// 11
	N -> = {N.tipo := tipo_ok; Pop(1)}:114							//// 12
	T -> int {T.tipo := entero; Pop(1)}:115							//// 13		
	T -> boolean {T.tipo := logico; Pop(1)}:116						//// 14
	T -> string {T.tipo := cadena; Pop(1)}:117						//// 15
	S -> print E ; {S.tipo := if E.tipo = entero ||
		  E.tipo = cadena then tipo_ok
                  else tipo_error; Pop(3)}:118						//// 16
	S -> input id ;	{S.tipo := if
                  BuscaTipo(id.pos) = cadena || entero
                  then tipo_ok
				  else if BuscaTipo(id.pos) = logico
				  then tipo_error
				  else AnadirTipo(id.pos, entero); Pop(3)}:119			//// 17
	S -> return X ; {S.tipo := if
		  !ExisteTSL() then tipo_error
		  else if X.tipo != BuscaParam(S.pos, "TipoRetorno") then tipo_error
		  else tipo_ok; Pop(3)}:120								//// 18
	S -> id {W.pos := id.pos}:121 W {S.tipo := W.tipo; Pop(2)}:122	//// 19
	W -> N E ; {W.tipo := if N.tipo = E.tipo = entero
		  then tipo_ok
		  else if BuscaTipo(W.pos) = E.tipo
		  then tipo_ok
		  else tipo_error; Pop(3)}:123								//// 20
	W -> ({W.tipo := if BuscaTipo(W.pos) == null
			then tipo_error else tipo_ok;
			L.pos := W.pos; L.tipo := tipo_ok}:124 L ) ; {W.tipo := L.tipo; Pop(4)}:125	//// 21
	L -> {E.cont := 1}:126 E {Q.pos := L.pos; Q.tipo := L.tipo
		  Q.cont := E.cont}:127
	     Q {L.tipo := if
	  	  E.tipo = BuscaParam(L.pos, E.cont)
		  && Q.tipo = tipo_ok then tipo_ok
		  else tipo_error; Pop(2)}:128								//// 22
	L -> lambda {}													//// 23
	Q -> , {E.cont := Q.cont++}:129 E
	     {Q1.pos := Q.pos;
	      Q1.cont := E.cont;
	      Q1.tipo := Q.tipo}:130
	     Q1 {Q.tipo := if E.tipo = BuscaParam(Q.pos, E.cont)
		  && Q1.tipo = tipo_ok then tipo_ok
		  else tipo_error; Pop(3)}:131								//// 24
	Q -> lambda {Q.tipo := tipo_ok}:132								//// 25
	X -> E {X.tipo := E.tipo; Pop(1)}:133							//// 26
	X -> lambda {X.tipo := vacio}:134 							//// 27
	F -> function {zona_decl := true}:135
	     id {AnadirTipo(id.pos, funcion),
		 TSL := CreaTabla(), despl = 0}:136
	     H {AnadirParam(id.pos, H.tipo, "TipoRetorno")}:137
             ( {A.cont := 0;
			 	A.pos := id.pos;
				AsignarParam(0, "NumParams")}:138
		 A ) {
			{C.tipo := H.tipo; C.pos := id.pos}:139 C {LiberaTablaTSL()}:140
	     } {Pop(9)}:141												//// 28
	H -> T {H.tipo := T.tipo; Pop(1)}:142							//// 29
	H -> lambda {H.tipo := vacio}:143								//// 30
	A -> T id {AnadirTipoTSL(id.pos, T.tipo);
		   AsignarParam(A.pos, A.cont);
		   if T.tipo = entero || logico
			then despl += 1
			else despl += 64;
		   K.pos := A.pos;
		   K.cont := A.cont + 1;
		   AsignarParam(A.cont, "NumParams")}:144 K {Pop(3)}:145					//// 31
	A -> lambda { // crear nueva regla para añadir la cantidad de params }													//// 32
	K -> , T id {AnadirTipoTSL(id.pos, T.tipo);
		     AsignarParam(K.pos, K.cont);
		     if T.tipo = entero || logico
			  then despl += 1
			  else despl += 64;
		   K1.pos := K.pos;
		   K1.cont := K.cont + 1;
		   AsignarParam(K.cont, "NumParams")}:146 K1 {Pop(4)}:147				//// 33
	K -> lambda { // crear nueva regla para añadir la cantidad de params }												//// 34
	C -> {B.tipo := C.tipo; B.pos := C.pos}:148 B
	     {C1.tipo := C.tipo; C1.pos := C.pos}:149 C1 {Pop(2)}:150 											//// 35
	C -> lambda {}													//// 36
	E -> R {Y.tipo := R.tipo}:151 Y {E.tipo := if
		Y.tipo = logico then logico
		else R.tipo; Pop(2)}:152									//// 37
	Y -> != R {Y1.tipo := if
             R.tipo = Y.tipo = entero then logico
	     else tipo_error}:153 Y1 {Y.tipo = Y1.tipo; Pop(3)}:154		//// 38
	Y -> lambda {}													//// 39
	R -> U {Z.tipo := U.tipo}:155 Z {R.tipo := if
	     Z.tipo = U.tipo then U.tipo
             else tipo_error; Pop(2)}:156								//// 40
	Z -> % U {Z1.tipo := if
	     U.tipo = Z.tipo = entero then entero
	     else tipo_error}:157 Z1 {Z.tipo = Z1.tipo; Pop(3)}:158		//// 41
	Z -> lambda {}													//// 42
	U -> ! V {U.tipo := if V.tipo = logico
	     then logico else tipo_error; Pop(2)}:159					//// 43
	U -> V {U.tipo := V.tipo; Pop(1)}:160							//// 44
	V -> id {J.pos := id.pos; J.tipo :=
	     if BuscaTipo(id.pos) = null then entero
	     else BuscaTipo(id.pos)}:161
	     J {V.tipo := if
	     BuscaTipo(J.pos) = null then entero
	     else J.tipo; Pop(2)}:162						//// 45
	V -> ( E ) {V.tipo := E.tipo; Pop(3)}:163						//// 46
	V -> ent {V.tipo := entero; Pop(1)}:164 						//// 47
	V -> cad {V.tipo := cadena; Pop(1)}:165							//// 48
	J -> ( {L.pos := J.pos; L.tipo := J.tipo}:166 L )
	     {J.tipo := if
	     L.tipo = tipo_ok then ConsultarTipoRetorno(J.pos)
	     else tipo_error; Pop(3)}:167								//// 49
	J -> lambda {}													//// 50
